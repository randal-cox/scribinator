#!./venv/bin/python3

import argparse, sys, time, os
import logging
from dotenv import load_dotenv

# Add lib directory to the Python path before loading the local libs
sys.path.append(os.path.abspath('lib'))
from scribinator.cli import cli_start, cli_end
from scribinator.models import Transcription

def main():
    """Get local copies of the AI models used for scribinator"""
    # pull in our env variables
    load_dotenv()

    ##############################
    # parse the arguments
    ##############################
    parser = argparse.ArgumentParser(description="Transcribe and annotate an audio file")
    cli_start(parser)

    # script-specific switches
    parser.add_argument('--title', type=str, default=None, help="The title of the audio file")
    parser.add_argument('--description', type=str, default=None, help="A description of the audio file")
    parser.add_argument('--location', type=str, default=None, help="Where the audio file was recorded")
    parser.add_argument('--when', type=str, default=None, help="When the audio was recorded")
    parser.add_argument('--author', type=str, default=None, help="Who recorder the")

    # Define audio files
    parser.add_argument('files', nargs='*', help="Audio files to be processed.")

    # get everything wrapped up
    args, logger = cli_end(parser)

    ##############################
    # process the files. If there is only one, make it a little cleaner
    ##############################
    if len(args.files) == 1:
        Transcription(args.files[0], args).run()
    elif len(args.files) > 1:
        with logger.indent(f"Processing {len(args.files):,} input files"):
            for path in args.files:
                Transcription(path, args).run()

if __name__ == "__main__":
    main()
