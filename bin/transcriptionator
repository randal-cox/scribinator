#!./venv/bin/python3
import argparse
import sys
import logging
import time
import os
from dotenv import load_dotenv

# 1) Add lib directory to the Python path
sys.path.append(os.path.abspath('lib'))

from logging_setup import setup_logging
from transcribe import Transcription

def parse_args():
    parser = argparse.ArgumentParser(description="Audio processing for speaker diarization.")

    parser.add_argument('-r', '--reset', action='store_true', default=False, help="Recompute all files from scratch")

    # Define verbosity levels
    parser.add_argument('-q', '--quiet', action='store_const', const=0, help="Run in quiet mode (verbosity level 0).")
    parser.add_argument('-v', '--verbose', action='count', default=0, help="Increase verbosity level (use -vv or -vvv for more).")

    # Define audio files
    parser.add_argument('files', nargs='*', help="Audio files to be processed.")

    args = parser.parse_args()

    # Set verbosity to 1 by default if no -q or -v is specified
    if args.quiet is not None:
        args.verbosity = args.quiet
    else:
        args.verbosity = max(2, args.verbose)
    del args.quiet
    del args.verbose

    return args

def main():
    # pull in our env variables
    load_dotenv()

    # get the command-line arguments
    args = parse_args()

    # Setup custom logger
    global logger
    logger = setup_logging()

    # show our parameters
    with logger.indent("Settings"):
        for k,v in vars(args).items():
            if k == 'files': continue
            logger.info(f"{k + ':':<20s} {v}")


    # Handle quiet/verbose modes
    if args.verbosity == 0:
        logger.setLevel(logging.CRITICAL)
    elif args.verbosity == 1:
        logger.setLevel(logging.WARNING)
    elif args.verbosity == 2:
        logger.setLevel(logging.INFO)
    elif args.verbosity == 3:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    # process the files. If there is only one, make it a little cleaner
    if len(args.files) == 1:
        t = Transcription(args.files[0], args)
        t.run()
    elif len(args.files) > 1:
        with logger.indent(f"Processing {len(args.files):,} input files"):
            for path in args.files:
                t = Transcription(path, args)
                t.run()

if __name__ == "__main__":
    main()
